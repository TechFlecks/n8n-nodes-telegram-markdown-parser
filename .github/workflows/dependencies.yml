# TechFlecks Telegram Markdown Parser - Dependency Updates
#
# Copyright ¬© 2025 TechFlecks
# Licensed under TechFlecks Software License Agreement v1.0
#
# This workflow automatically checks for and creates PRs for dependency updates

name: üîÑ Dependency Updates

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to check'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - major
          - minor
          - patch

env:
  NODE_VERSION: '20.15'

jobs:
  dependency-updates:
    name: üîÑ Check Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üîç Check for Updates
        id: updates
        run: |
          echo "üîç Checking for outdated packages..."
          npm outdated --json > outdated.json || true
          
          if [[ -s outdated.json ]]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "üìã Found outdated dependencies"
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "‚úÖ All dependencies are up to date"
          fi

      - name: üîÑ Update Dependencies
        if: steps.updates.outputs.has-updates == 'true'
        run: |
          echo "üîÑ Updating dependencies..."
          
          # Install npm-check-updates
          npm install -g npm-check-updates
          
          # Update based on input or default to minor updates
          UPDATE_TYPE="${{ inputs.update_type || 'minor' }}"
          
          case $UPDATE_TYPE in
            "patch")
              ncu -u --target patch
              ;;
            "minor")
              ncu -u --target minor
              ;;
            "major")
              ncu -u --target latest
              ;;
            "all")
              ncu -u --target latest
              ;;
          esac
          
          # Install updated packages
          npm install
          
          echo "‚úÖ Dependencies updated"

      - name: üß™ Test Updated Dependencies
        if: steps.updates.outputs.has-updates == 'true'
        run: |
          echo "üß™ Testing with updated dependencies..."
          
          # Build project
          npm run build
          
          # Run tests
          npm test
          
          # Validate license
          npm run validate-license
          
          echo "‚úÖ All tests passed with updated dependencies"

      - name: üìä Generate Update Summary
        if: steps.updates.outputs.has-updates == 'true'
        run: |
          echo "üìä Generating update summary..."
          
          # Create summary of changes
          cat > UPDATE_SUMMARY.md << 'EOF'
          # üîÑ TechFlecks Dependency Updates
          
          This automated update includes the following dependency changes:
          
          ## üì¶ Updated Packages
          
          EOF
          
          # Add npm outdated output if available
          if [[ -s outdated.json ]]; then
            echo "## üìã Outdated Packages Report" >> UPDATE_SUMMARY.md
            echo '```json' >> UPDATE_SUMMARY.md
            cat outdated.json >> UPDATE_SUMMARY.md
            echo '```' >> UPDATE_SUMMARY.md
          fi
          
          # Add testing results
          cat >> UPDATE_SUMMARY.md << 'EOF'
          
          ## ‚úÖ Verification
          
          - [x] Build process successful
          - [x] All unit tests passing
          - [x] TechFlecks license validation passed
          
          ## ü§ñ Automated Update
          
          This PR was automatically created by the TechFlecks dependency update workflow.
          
          **Review Guidelines:**
          - Check for any breaking changes in updated packages
          - Verify that all tests are still passing
          - Ensure TechFlecks license compliance is maintained
          
          ---
          
          **Generated by:** TechFlecks Dependency Update Workflow  
          **Contact:** support@techflecks.com
          EOF

      - name: üîß Configure Git
        if: steps.updates.outputs.has-updates == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "TechFlecks Dependency Bot"

      - name: üöÄ Create Pull Request
        if: steps.updates.outputs.has-updates == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create branch for updates
          BRANCH_NAME="dependencies/auto-update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          
          # Stage changes
          git add package.json package-lock.json
          
          # Commit changes
          git commit -m "üîÑ Update dependencies - TechFlecks automated update

          - Updated outdated packages
          - Maintained TechFlecks license compliance
          - All tests passing
          
          Generated by: TechFlecks Dependency Update Workflow"
          
          # Push branch
          git push origin "$BRANCH_NAME"
          
          # Create pull request
          gh pr create \
            --title "üîÑ Automated Dependency Updates - $(date +%Y-%m-%d)" \
            --body-file UPDATE_SUMMARY.md \
            --head "$BRANCH_NAME" \
            --base main \
            --label "dependencies" \
            --label "automated" \
            --label "techflecks"

  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üîí Security Audit
        run: |
          echo "üîç Running security audit..."
          
          # Run npm audit
          npm audit --audit-level=moderate
          
          # Generate security report
          npm audit --json > security-audit.json || true
          
          # Check if there are high/critical vulnerabilities
          HIGH_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          
          if [[ $HIGH_VULNS -gt 0 ]] || [[ $CRITICAL_VULNS -gt 0 ]]; then
            echo "‚ö†Ô∏è Found high/critical security vulnerabilities"
            echo "üìä High: $HIGH_VULNS, Critical: $CRITICAL_VULNS"
            
            # Create security issue if vulnerabilities found
            gh issue create \
              --title "üö® Security Vulnerabilities Detected - $(date +%Y-%m-%d)" \
              --body "Security audit detected high or critical vulnerabilities.

            **Summary:**
            - High severity: $HIGH_VULNS
            - Critical severity: $CRITICAL_VULNS

            Please review and update dependencies to address these security issues.

            **Generated by:** TechFlecks Security Audit Workflow" \
              --label "security" \
              --label "high-priority" \
              --assignee "@me" || true
          else
            echo "‚úÖ No high/critical security vulnerabilities found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Workflow Summary:
# ================
# This workflow handles automated dependency management:
#
# üîÑ Dependency Updates - Checks and updates outdated packages
# üîí Security Audit - Monitors for security vulnerabilities
#
# Schedule:
# - Runs every Monday at 9:00 AM UTC
# - Manual trigger with update type selection
#
# Features:
# - Creates PRs for dependency updates
# - Tests updates before creating PR
# - Creates security issues for vulnerabilities
# - Maintains TechFlecks license compliance
#
# Contact: support@techflecks.com
