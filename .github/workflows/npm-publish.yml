# TechFlecks Telegram Markdown Parser - NPM Publishing Workflow
#
# Copyright © 2025 TechFlecks
# Licensed under TechFlecks Software License Agreement v1.0
#
# This workflow automatically publishes the package to npm when:
# 1. A new release is created on GitHub
# 2. Manual workflow dispatch is triggered
# 3. Version tag is pushed (v*.*.*)

name: 📦 Publish to NPM

on:
  # Trigger on new releases
  release:
    types: [published]
  
  # Trigger on version tags
  push:
    tags:
      - 'v*.*.*'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.15'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Job 1: Quality Assurance
  quality-check:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-publish: ${{ steps.check.outputs.should-publish }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm audit --audit-level=moderate

      - name: 🧹 Code Quality Checks
        run: |
          echo "🔍 Running ESLint..."
          npx eslint nodes package.json || true
          
          echo "🎯 Running Prettier Check..."
          npx prettier --check nodes demo*.js index.js || true

      - name: 🔨 Build Project
        run: |
          echo "🏗️ Building TypeScript..."
          npm run build
          
          echo "✅ Build completed successfully"

      - name: 🧪 Run Tests
        if: ${{ !inputs.skip_tests }}
        run: |
          echo "🧪 Running unit tests..."
          npm test
          
          echo "✅ All tests passed"

      - name: 📜 Validate TechFlecks License
        run: |
          echo "📜 Checking TechFlecks license compliance..."
          npm run validate-license
          
          echo "✅ License validation passed"

      - name: 🏷️ Get Version Information
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "📋 Current version: ${CURRENT_VERSION}"

      - name: ✅ Publication Check
        id: check
        run: |
          # Check if this version should be published
          if [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.ref }}" == refs/tags/v* ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "✅ Ready for publication"
          else
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Skipping publication (not a release trigger)"
          fi

  # Job 2: Version Management (for manual dispatch)
  version-bump:
    name: 🏷️ Version Management
    runs-on: ubuntu-latest
    needs: [quality-check]
    if: ${{ github.event_name == 'workflow_dispatch' && needs.quality-check.outputs.should-publish == 'true' }}
    
    outputs:
      new-version: ${{ steps.bump.outputs.new-version }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏷️ Bump Version
        id: bump
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Bump version
          NEW_VERSION=$(npm version ${{ inputs.version_bump }} --no-git-tag-version)
          echo "new-version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Commit version bump
          git add package.json package-lock.json
          git commit -m "🏷️ Bump version to ${NEW_VERSION} [skip ci]"
          git push
          
          # Create and push tag
          git tag ${NEW_VERSION}
          git push origin ${NEW_VERSION}
          
          echo "✅ Version bumped to ${NEW_VERSION}"

  # Job 3: NPM Publication
  npm-publish:
    name: 📦 Publish to NPM
    runs-on: ubuntu-latest
    needs: [quality-check, version-bump]
    if: ${{ always() && needs.quality-check.outputs.should-publish == 'true' }}
    
    environment: production
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔨 Build for Production
        run: |
          echo "🏗️ Building production assets..."
          npm run build
          
          echo "📊 Package size analysis..."
          npx bundlesize || true

      - name: 🔍 Pre-publish Verification
        run: |
          echo "🔍 Verifying package contents..."
          npm pack --dry-run
          
          echo "📋 Package information:"
          npm ls --production || true

      - name: 📢 Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          echo "📦 Publishing ${PACKAGE_NAME}@${PACKAGE_VERSION} to NPM..."
          
          # Check if version already exists
          if npm view "${PACKAGE_NAME}@${PACKAGE_VERSION}" version 2>/dev/null; then
            echo "⚠️ Version ${PACKAGE_VERSION} already exists on NPM"
            echo "   Skipping publication to avoid conflicts"
            exit 0
          fi
          
          # Publish to NPM
          npm publish --access public
          
          echo "✅ Successfully published ${PACKAGE_NAME}@${PACKAGE_VERSION}"

      - name: 📊 Post-publish Verification
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          echo "🔍 Verifying publication..."
          sleep 30  # Wait for NPM registry to update
          
          if npm view "${PACKAGE_NAME}@${PACKAGE_VERSION}" version; then
            echo "✅ Package successfully available on NPM"
          else
            echo "❌ Package verification failed"
            exit 1
          fi

  # Job 4: Notification & Documentation
  post-publish:
    name: 📢 Post-Publication Tasks
    runs-on: ubuntu-latest
    needs: [quality-check, npm-publish]
    if: ${{ always() && needs.npm-publish.result == 'success' }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📊 Generate Publication Summary
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          echo "## 🎉 TechFlecks Package Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** \`${PACKAGE_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${PACKAGE_VERSION}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** [NPM](https://www.npmjs.com/package/${PACKAGE_NAME})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npm install ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [NPM Package](https://www.npmjs.com/package/${PACKAGE_NAME})" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Repository](https://github.com/TechFlecks/n8n-nodes-telegram-markdown-parser)" >> $GITHUB_STEP_SUMMARY
          echo "- [TechFlecks Website](https://www.techflecks.com)" >> $GITHUB_STEP_SUMMARY

      - name: 🏷️ Create GitHub Release (if not exists)
        if: ${{ github.event_name != 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_NAME="v${PACKAGE_VERSION}"
          
          # Check if release already exists
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "ℹ️ Release $TAG_NAME already exists"
          else
            echo "🏷️ Creating GitHub release $TAG_NAME..."
            gh release create "$TAG_NAME" \
              --title "🚀 TechFlecks Telegram Markdown Parser v${PACKAGE_VERSION}" \
              --notes "🎉 **TechFlecks Telegram Markdown Parser v${PACKAGE_VERSION}** has been published to NPM!

          ## 📦 Installation
          \`\`\`bash
          npm install @techflecks/n8n-nodes-telegram-markdown-parser
          \`\`\`

          ## 🔗 Links
          - [NPM Package](https://www.npmjs.com/package/@techflecks/n8n-nodes-telegram-markdown-parser)
          - [Documentation](https://github.com/TechFlecks/n8n-nodes-telegram-markdown-parser#readme)
          - [TechFlecks](https://www.techflecks.com)

          Built with ❤️ by **TechFlecks**" \
              --latest
          fi

# Workflow Summary:
# ================
# 1. 🔍 Quality Assurance - Runs tests, linting, and license validation
# 2. 🏷️ Version Management - Bumps version for manual triggers  
# 3. 📦 NPM Publication - Publishes to NPM registry
# 4. 📢 Post-Publication - Creates releases and notifications
#
# Triggers:
# - 🏷️ New GitHub releases (automatic)
# - 🚀 Version tags pushed (v*.*.*)  
# - 🎯 Manual workflow dispatch (with options)
#
# Requirements:
# - NPM_TOKEN secret configured
# - GITHUB_TOKEN permissions for releases
#
# Contact: support@techflecks.com
